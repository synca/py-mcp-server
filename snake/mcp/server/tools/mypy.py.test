"""Test file for updated mypy.py implementation."""

import pathlib
import pytest
from unittest.mock import MagicMock, AsyncMock, patch

from snake.mcp.server.tools.mypy import MypyTool


def test_mypy_tool_init():
    """Test MypyTool constructor."""
    # Test with no parameters
    tool = MypyTool()
    assert tool._ctx is None
    assert tool._path_str is None
    assert tool._validated_path is None
    
    # Test with parameters
    ctx = MagicMock()
    path = "/test/path"
    tool = MypyTool(ctx=ctx, path=path)
    assert tool._ctx is ctx
    assert tool._path_str == path
    assert tool._validated_path is None


@pytest.mark.asyncio
async def test_mypy_tool_handle():
    """Test the handle method with the new path property approach."""
    # Create mock objects
    ctx = MagicMock()
    path = "/test/path"
    path_obj = MagicMock()
    
    # Args for handle
    mypy_args = ["--test-arg"]
    disallow_untyped_defs = True
    disallow_incomplete_defs = True
    exclude = ["tests/"]
    
    # Mock return values
    config_file = MagicMock()
    exclusions = ["tests/"]
    mypy_cmd = ["mypy", "--disallow-untyped-defs"]
    process_result = (0, "stdout", "stderr")
    expected_result = {
        "success": True,
        "data": {
            "message": "No issues found",
            "output": "stdout\nstderr",
            "project_path": path,
            "issues_count": 0,
            "has_issues": False
        },
        "error": None
    }
    
    # Create tool and set up mocks
    tool = MypyTool(ctx=ctx, path=path)
    
    # Mock the path property
    with patch.object(MypyTool, "path", return_value=path_obj), \
         patch.object(MypyTool, "_find_config_file", return_value=config_file), \
         patch.object(MypyTool, "_handle_exclusions", return_value=exclusions), \
         patch.object(MypyTool, "_build_mypy_command", return_value=mypy_cmd), \
         patch.object(MypyTool, "_execute_mypy", return_value=process_result), \
         patch.object(MypyTool, "_process_mypy_output", return_value=expected_result):
        
        # Execute the handle method
        result = await tool.handle(
            mypy_args=mypy_args,
            disallow_untyped_defs=disallow_untyped_defs,
            disallow_incomplete_defs=disallow_incomplete_defs,
            exclude=exclude
        )
    
    # Verify the result and method calls
    assert result == expected_result
    assert tool._find_config_file.call_args == [(path_obj,), {}]
    assert tool._handle_exclusions.call_args == [(path_obj, exclude), {}]
    assert tool._build_mypy_command.call_args == [(
        config_file, exclusions, mypy_args, 
        disallow_untyped_defs, disallow_incomplete_defs), {}]
    assert tool._execute_mypy.call_args == [(mypy_cmd, path_obj), {}]
    assert tool._process_mypy_output.call_args == [(process_result, str(path_obj)), {}]


@pytest.mark.parametrize("error", [None, Exception("Test error")])
@pytest.mark.asyncio
async def test_mypy_tool_run(error):
    """Test the run method with error handling."""
    # Create mock objects
    ctx = MagicMock()
    path = "/test/path"
    
    # Args for run
    mypy_args = ["--test-arg"]
    disallow_untyped_defs = True
    disallow_incomplete_defs = True
    exclude = ["tests/"]
    
    kwargs = {
        "mypy_args": mypy_args,
        "disallow_untyped_defs": disallow_untyped_defs,
        "disallow_incomplete_defs": disallow_incomplete_defs,
        "exclude": exclude
    }
    
    # Expected results
    success_result = {
        "success": True,
        "data": {
            "message": "Success!",
            "output": "Output data",
        },
        "error": None
    }
    
    tb_output = "Traceback: test_error_traceback"
    error_msg = f"Failed to run custom: {error}"
    failure_result = {
        "success": False,
        "data": None,
        "error": f"{error_msg}\n{tb_output}"
    }
    
    # Create tool instance
    tool = MypyTool(ctx=ctx, path=path)
    tool.__class__.__name__ = "CustomTool"  # For error message
    
    # Set up mocks
    mock_validate = MagicMock()
    if error:
        mock_validate.side_effect = error
    
    mock_handle = AsyncMock()
    mock_handle.return_value = success_result
    
    mock_tb = MagicMock(return_value=tb_output)
    
    # Run with patches
    with patch("snake.mcp.server.tools.base.Tool.validate_path", mock_validate), \
         patch("snake.mcp.server.tools.mypy.MypyTool.handle", mock_handle), \
         patch("traceback.format_exc", mock_tb):
        
        result = await tool.run(**kwargs)
    
    # Verify results
    if error:
        assert result == failure_result
        assert mock_validate.called
        assert not mock_handle.called
        assert mock_tb.called
    else:
        assert result == success_result
        assert mock_validate.called
        assert mock_handle.called
        assert mock_handle.call_args == [(), kwargs]
